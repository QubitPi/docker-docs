<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Natural language processing guides on Docker Docs</title>
    <link>https://docs.docker.com/guides/use-case/nlp/</link>
    <description>Recent content in Natural language processing guides on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/guides/use-case/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build a language translation app</title>
      <link>https://docs.docker.com/guides/use-case/nlp/language-translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/guides/use-case/nlp/language-translation/</guid>
      <description>Overview This guide walks you through building and running a language translation application. You&#39;ll build the application using Python with Googletrans, and then set up the environment and run the application using Docker.&#xA;The application demonstrates a simple but practical use of the Googletrans library for language translation, showcasing basic Python and Docker concepts. Googletrans is a free and unlimited Python library that implements the Google Translate API. It uses the Google Translate Ajax API to make calls to such methods as detect and translate.</description>
    </item>
    <item>
      <title>Build a named entity recognition app</title>
      <link>https://docs.docker.com/guides/use-case/nlp/named-entity-recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/guides/use-case/nlp/named-entity-recognition/</guid>
      <description>Overview This guide walks you through building and running a named entity recognition (NER) application. You&#39;ll build the application using Python with spaCy, and then set up the environment and run the application using Docker.&#xA;The application processes input text to identify and print named entities, like people, organizations, or locations.&#xA;Prerequisites You have installed the latest version of Docker Desktop. Docker adds new features regularly and some parts of this guide may work only with the latest version of Docker Desktop.</description>
    </item>
    <item>
      <title>Build a sentiment analysis app</title>
      <link>https://docs.docker.com/guides/use-case/nlp/sentiment-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/guides/use-case/nlp/sentiment-analysis/</guid>
      <description>Overview In this guide, you learn how to build and run a sentiment analysis application. You&#39;ll build the application using Python with the Natural Language Toolkit (NLTK), and then set up the environment and run the application using Docker.&#xA;The application analyzes user input text for sentiment using NLTK&#39;s SentimentIntensityAnalyzer and outputs whether the sentiment is positive, negative, or neutral.&#xA;Prerequisites You have installed the latest version of Docker Desktop.</description>
    </item>
    <item>
      <title>Build a text recognition app</title>
      <link>https://docs.docker.com/guides/use-case/nlp/text-classification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/guides/use-case/nlp/text-classification/</guid>
      <description>Overview In this guide, you&#39;ll learn how to create and run a text recognition application. You&#39;ll build the application using Python with scikit-learn and the Natural Language Toolkit (NLTK). Then you&#39;ll set up the environment and run the application using Docker.&#xA;The application analyzes the sentiment of a user&#39;s input text using NLTK&#39;s SentimentIntensityAnalyzer. It lets the user input text, which is then processed to determine its sentiment, classifying it as either positive or negative.</description>
    </item>
    <item>
      <title>Build a text summarization app</title>
      <link>https://docs.docker.com/guides/use-case/nlp/text-summarization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/guides/use-case/nlp/text-summarization/</guid>
      <description>Overview In this guide, you&#39;ll learn how to build and run a text summarization application. You&#39;ll build the application using Python with the Bert Extractive Summarizer, and then set up the environment and run the application using Docker.&#xA;The sample text summarization application uses the Bert Extractive Summarizer. This tool utilizes the HuggingFace Pytorch transformers library to run extractive summarizations. This works by first embedding the sentences, then running a clustering algorithm, finding the sentences that are closest to the cluster&#39;s centroids.</description>
    </item>
  </channel>
</rss>
