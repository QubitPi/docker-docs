<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to GitHub Actions on Docker Docs</title>
    <link>https://docker.qubitpi.org/build/ci/github-actions/</link>
    <description>Recent content in Introduction to GitHub Actions on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/build/ci/github-actions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Add image annotations with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/annotations/</guid>
      <description>Annotations let you specify arbitrary metadata for OCI image components, such as manifests, indexes, and descriptors.&#xA;To add annotations when building images with GitHub Actions, use the metadata-action to automatically create OCI-compliant annotations. The metadata action creates an annotations output that you can reference, both with build-push-action and bake-action.&#xA;build-push-action bake-action name: ci on: push: env: IMAGE_NAME: user/app jobs: docker: runs-on: ubuntu-latest steps: - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Login to Docker Hub uses: docker/login-action@v3 with: username: ${{ vars.</description>
    </item>
    <item>
      <title>Add SBOM and provenance attestations with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/attestations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/attestations/</guid>
      <description>Software Bill of Material (SBOM) and provenance attestations add metadata about the contents of your image, and how it was built.&#xA;Attestations are supported with version 4 and later of the docker/build-push-action.&#xA;Default provenance The docker/build-push-action GitHub Action automatically adds provenance attestations to your image, with the following conditions:&#xA;If the GitHub repository is public, provenance attestations with mode=max are automatically added to the image. If the GitHub repository is private, provenance attestations with mode=min are automatically added to the image.</description>
    </item>
    <item>
      <title>Cache management with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/cache/</guid>
      <description>This page contains examples on using the cache storage backends with GitHub Actions.&#xA;Note&#xA;See Cache storage backends for more details about cache storage backends.&#xA;Inline cache In most cases you want to use the inline cache exporter. However, note that the inline cache exporter only supports min cache mode. To use max cache mode, push the image and the cache separately using the registry cache exporter with the cache-to option, as shown in the registry cache example.</description>
    </item>
    <item>
      <title>Configuring your GitHub Actions builder</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/configure-builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/configure-builder/</guid>
      <description>This page contains instructions on configuring your BuildKit instances when using our Setup Buildx Action.&#xA;Version pinning By default, the action will attempt to use the latest version of Buildx available on the GitHub Runner (the build client) and the latest release of BuildKit (the build server).&#xA;To pin to a specific version of Buildx, use the version input. For example, to pin to Buildx v0.10.0:&#xA;- name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 with: version: v0.</description>
    </item>
    <item>
      <title>Copy image between registries with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/copy-image-registries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/copy-image-registries/</guid>
      <description>Multi-platform images built using Buildx can be copied from one registry to another using the buildx imagetools create command:&#xA;name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Login to Docker Hub uses: docker/login-action@v3 with: username: ${{ vars.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }} - name: Login to GitHub Container Registry uses: docker/login-action@v3 with: registry: ghcr.</description>
    </item>
    <item>
      <title>Export to Docker with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/export-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/export-docker/</guid>
      <description>You may want your build result to be available in the Docker client through docker images to be able to use it in another step of your workflow:&#xA;name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Build uses: docker/build-push-action@v6 with: load: true tags: myimage:latest - name: Inspect run: | docker image inspect myimage:latest </description>
    </item>
    <item>
      <title>GitHub Actions build summary</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/build-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/build-summary/</guid>
      <description>Docker&#39;s GitHub Actions for building and pushing images generate a job summary for your build that outlines the execution and materials used:&#xA;A summary showing the Dockerfile used, the build duration, and cache utilization Inputs for the build, such as build arguments, tags, labels, and build contexts For builds with Bake, the full bake definition for the build Job summaries for Docker builds appear automatically if you use the following versions of the Build and push Docker images or Docker Buildx Bake GitHub Actions:</description>
    </item>
    <item>
      <title>Local registry with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/local-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/local-registry/</guid>
      <description>For testing purposes you may need to create a local registry to push images into:&#xA;name: ci on: push: jobs: docker: runs-on: ubuntu-latest services: registry: image: registry:2 ports: - 5000:5000 steps: - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 with: driver-opts: network=host - name: Build and push to local registry uses: docker/build-push-action@v6 with: push: true tags: localhost:5000/name/app:latest - name: Inspect run: | docker buildx imagetools inspect localhost:5000/name/app:latest </description>
    </item>
    <item>
      <title>Manage tags and labels with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/manage-tags-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/manage-tags-labels/</guid>
      <description>If you want an &amp;quot;automatic&amp;quot; tag management and OCI Image Format Specification for labels, you can do it in a dedicated setup step. The following workflow will use the Docker Metadata Action to handle tags and labels based on GitHub Actions events and Git metadata:&#xA;name: ci on: schedule: - cron: &amp;#34;0 10 * * *&amp;#34; push: branches: - &amp;#34;**&amp;#34; tags: - &amp;#34;v*.*.*&amp;#34; pull_request: jobs: docker: runs-on: ubuntu-latest steps: - name: Docker meta id: meta uses: docker/metadata-action@v5 with: # list of Docker images to use as base name for tags images: | name/app ghcr.</description>
    </item>
    <item>
      <title>Multi-platform image with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/multi-platform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/multi-platform/</guid>
      <description>You can build multi-platform images using the platforms option, as shown in the following example:&#xA;Note&#xA;For a list of available platforms, see the Docker Setup Buildx action. If you want support for more platforms, you can use QEMU with the Docker Setup QEMU action. name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Login to Docker Hub uses: docker/login-action@v3 with: username: ${{ vars.</description>
    </item>
    <item>
      <title>Named contexts with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/named-contexts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/named-contexts/</guid>
      <description>You can define additional build contexts, and access them in your Dockerfile with FROM name or --from=name. When Dockerfile defines a stage with the same name it&#39;s overwritten.&#xA;This can be useful with GitHub Actions to reuse results from other builds or pin an image to a specific tag in your workflow.&#xA;Pin image to a tag Replace alpine:latest with a pinned one:&#xA;# syntax=docker/dockerfile:1 FROM alpine RUN echo &amp;#34;Hello World&amp;#34; name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Build uses: docker/build-push-action@v6 with: build-contexts: | alpine=docker-image://alpine:3.</description>
    </item>
    <item>
      <title>Push to multiple registries with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/push-multi-registries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/push-multi-registries/</guid>
      <description>The following workflow will connect you to Docker Hub and GitHub Container Registry, and push the image to both registries:&#xA;name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Login to Docker Hub uses: docker/login-action@v3 with: username: ${{ vars.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }} - name: Login to GitHub Container Registry uses: docker/login-action@v3 with: registry: ghcr.</description>
    </item>
    <item>
      <title>Reproducible builds with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/reproducible-builds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/reproducible-builds/</guid>
      <description>SOURCE_DATE_EPOCH is a standardized environment variable for instructing build tools to produce a reproducible output. Setting the environment variable for a build makes the timestamps in the image index, config, and file metadata reflect the specified Unix time.&#xA;To set the environment variable in GitHub Actions, use the built-in env property on the build step.&#xA;Unix epoch timestamps The following example sets the SOURCE_DATE_EPOCH variable to 0, Unix epoch.&#xA;docker/build-push-action docker/bake-action name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Build uses: docker/build-push-action@v6 with: tags: user/app:latest env: SOURCE_DATE_EPOCH: 0 name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Build uses: docker/bake-action@v5 env: SOURCE_DATE_EPOCH: 0 Git commit timestamps The following example sets SOURCE_DATE_EPOCH to the Git commit timestamp.</description>
    </item>
    <item>
      <title>Share built image between jobs with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/share-image-jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/share-image-jobs/</guid>
      <description>As each job is isolated in its own runner, you can&#39;t use your built image between jobs, except if you&#39;re using self-hosted runners However, you can pass data between jobs in a workflow using the actions/upload-artifact and actions/download-artifact actions:&#xA;name: ci on: push: jobs: build: runs-on: ubuntu-latest steps: - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Build and export uses: docker/build-push-action@v6 with: tags: myimage:latest outputs: type=docker,dest=/tmp/myimage.tar - name: Upload artifact uses: actions/upload-artifact@v4 with: name: myimage path: /tmp/myimage.</description>
    </item>
    <item>
      <title>Test before push with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/test-before-push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/test-before-push/</guid>
      <description>In some cases, you might want to validate that the image works as expected before pushing it. The following workflow implements several steps to achieve this:&#xA;Build and export the image to Docker Test your image Multi-platform build and push the image name: ci on: push: env: TEST_TAG: user/app:test LATEST_TAG: user/app:latest jobs: docker: runs-on: ubuntu-latest steps: - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Login to Docker Hub uses: docker/login-action@v3 with: username: ${{ vars.</description>
    </item>
    <item>
      <title>Update Docker Hub description with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/update-dockerhub-desc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/update-dockerhub-desc/</guid>
      <description>You can update the Docker Hub repository description using a third party action called Docker Hub Description with this action:&#xA;name: ci on: push: jobs: docker: runs-on: ubuntu-latest steps: - name: Set up QEMU uses: docker/setup-qemu-action@v3 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Login to Docker Hub uses: docker/login-action@v3 with: username: ${{ vars.DOCKERHUB_USERNAME }} password: ${{ secrets.DOCKERHUB_TOKEN }} - name: Build and push uses: docker/build-push-action@v6 with: push: true tags: user/app:latest - name: Update repo description uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4.</description>
    </item>
    <item>
      <title>Using secrets with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/secrets/</guid>
      <description>A build secret is sensitive information, such as a password or API token, consumed as part of the build process. Docker Build supports two forms of secrets:&#xA;Secret mounts add secrets as files in the build container (under /run/secrets by default). SSH mounts add SSH agent sockets or keys into the build container. This page shows how to use secrets with GitHub Actions. For an introduction to secrets in general, see Build secrets.</description>
    </item>
  </channel>
</rss>
