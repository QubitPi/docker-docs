<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Buildx Bake on Docker Docs</title>
    <link>https://docs.docker.com/build/bake/</link>
    <description>Recent content in Buildx Bake on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/build/bake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bake file reference</title>
      <link>https://docs.docker.com/build/bake/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/reference/</guid>
      <description>The Bake file is a file for defining workflows that you run using docker buildx bake.&#xA;File format You can define your Bake file in the following file formats:&#xA;HashiCorp Configuration Language (HCL) JSON YAML (Compose file) By default, Bake uses the following lookup order to find the configuration file:&#xA;compose.yaml compose.yml docker-compose.yml docker-compose.yaml docker-bake.json docker-bake.override.json docker-bake.hcl docker-bake.override.hcl You can specify the file location explicitly using the --file flag:&#xA;$ docker buildx bake --file .</description>
    </item>
    <item>
      <title>Bake targets</title>
      <link>https://docs.docker.com/build/bake/targets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/targets/</guid>
      <description>A target in a Bake file represents a build invocation. It holds all the information you would normally pass to a docker build command using flags.&#xA;target &amp;#34;webapp&amp;#34; { dockerfile = &amp;#34;webapp.Dockerfile&amp;#34; tags = [&amp;#34;docker.io/username/webapp:latest&amp;#34;] context = &amp;#34;https://github.com/username/webapp&amp;#34; } To build a target with Bake, pass name of the target to the bake command.&#xA;$ docker buildx bake webapp You can build multiple targets at once by passing multiple target names to the bake command.</description>
    </item>
    <item>
      <title>Building with Bake from a Compose file</title>
      <link>https://docs.docker.com/build/bake/compose-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/compose-file/</guid>
      <description>Bake supports the Compose file format to parse a Compose file and translate each service to a target.&#xA;# docker-compose.yml services: webapp-dev: build: &amp;amp;build-dev dockerfile: Dockerfile.webapp tags: - docker.io/username/webapp:latest cache_from: - docker.io/username/webapp:cache cache_to: - docker.io/username/webapp:cache webapp-release: build: &amp;lt;&amp;lt;: *build-dev x-bake: platforms: - linux/amd64 - linux/arm64 db: image: docker.io/username/db build: dockerfile: Dockerfile.db $ docker buildx bake --print { &amp;#34;group&amp;#34;: { &amp;#34;default&amp;#34;: { &amp;#34;targets&amp;#34;: [&amp;#34;db&amp;#34;, &amp;#34;webapp-dev&amp;#34;, &amp;#34;webapp-release&amp;#34;] } }, &amp;#34;target&amp;#34;: { &amp;#34;db&amp;#34;: { &amp;#34;context&amp;#34;: &amp;#34;.</description>
    </item>
    <item>
      <title>Expression evaluation in Bake</title>
      <link>https://docs.docker.com/build/bake/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/expressions/</guid>
      <description>Bake files in the HCL format support expression evaluation, which lets you perform arithmetic operations, conditionally set values, and more.&#xA;Arithmetic operations You can perform arithmetic operations in expressions. The following example shows how to multiply two numbers.&#xA;docker-bake.hcl sum = 7*6 target &amp;#34;default&amp;#34; { args = { answer = sum } } Printing the Bake file with the --print flag shows the evaluated value for the answer build argument.</description>
    </item>
    <item>
      <title>HCL functions</title>
      <link>https://docs.docker.com/build/bake/funcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/funcs/</guid>
      <description>HCL functions are great for when you need to manipulate values in your build configuration in more complex ways than just concatenation or interpolation.&#xA;Standard library Bake ships with built-in support for the go-cty standard library functions. The following example shows the add function.&#xA;docker-bake.hcl variable &amp;#34;TAG&amp;#34; { default = &amp;#34;latest&amp;#34; } group &amp;#34;default&amp;#34; { targets = [&amp;#34;webapp&amp;#34;] } target &amp;#34;webapp&amp;#34; { args = { buildno = &amp;#34;${add(123, 1)}&amp;#34; } } $ docker buildx bake --print webapp { &amp;#34;group&amp;#34;: { &amp;#34;default&amp;#34;: { &amp;#34;targets&amp;#34;: [&amp;#34;webapp&amp;#34;] } }, &amp;#34;target&amp;#34;: { &amp;#34;webapp&amp;#34;: { &amp;#34;context&amp;#34;: &amp;#34;.</description>
    </item>
    <item>
      <title>Inheritance in Bake</title>
      <link>https://docs.docker.com/build/bake/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/inheritance/</guid>
      <description>Targets can inherit attributes from other targets, using the inherits attribute. For example, imagine that you have a target that builds a Docker image for a development environment:&#xA;target &amp;#34;app-dev&amp;#34; { args = { GO_VERSION = &amp;#34;1.21&amp;#34; } tags = [&amp;#34;docker.io/username/myapp:dev&amp;#34;] labels = { &amp;#34;org.opencontainers.image.source&amp;#34; = &amp;#34;https://github.com/username/myapp&amp;#34; &amp;#34;org.opencontainers.image.author&amp;#34; = &amp;#34;moby.whale@example.com&amp;#34; } } You can create a new target that uses the same build configuration, but with slightly different attributes for a production build.</description>
    </item>
    <item>
      <title>Introduction to Bake</title>
      <link>https://docs.docker.com/build/bake/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/introduction/</guid>
      <description>Bake is an abstraction for the docker build command that lets you more easily manage your build configuration (CLI flags, environment variables, etc.) in a consistent way for everyone on your team.&#xA;Bake is a command built into the Buildx CLI, so as long as you have Buildx installed, you also have access to bake, via the docker buildx bake command.&#xA;Building a project with Bake Here&#39;s a simple example of a docker build command:</description>
    </item>
    <item>
      <title>Matrix targets</title>
      <link>https://docs.docker.com/build/bake/matrices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/matrices/</guid>
      <description>A matrix strategy lets you fork a single target into multiple different variants, based on parameters that you specify. This works in a similar way to Matrix strategies for GitHub Actions. You can use this to reduce duplication in your Bake definition.&#xA;The matrix attribute is a map of parameter names to lists of values. Bake builds each possible combination of values as a separate target.&#xA;Each generated target must have a unique name.</description>
    </item>
    <item>
      <title>Overriding configurations</title>
      <link>https://docs.docker.com/build/bake/overrides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/overrides/</guid>
      <description>Bake supports loading build definitions from files, but sometimes you need even more flexibility to configure these definitions. For example, you might want to override an attribute when building in a particular environment or for a specific target.&#xA;The following list of attributes can be overridden:&#xA;args cache-from cache-to context dockerfile labels no-cache output platform pull secrets ssh tags target To override these attributes, you can use the following methods:</description>
    </item>
    <item>
      <title>Remote Bake file definition</title>
      <link>https://docs.docker.com/build/bake/remote-definition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/remote-definition/</guid>
      <description>You can also build Bake files directly from a remote Git repository or HTTPS URL:&#xA;$ docker buildx bake &amp;#34;https://github.com/docker/cli.git#v20.10.11&amp;#34; --print #1 [internal] load git source https://github.com/docker/cli.git#v20.10.11 #1 0.745 e8f1871b077b64bcb4a13334b7146492773769f7 refs/tags/v20.10.11 #1 2.022 From https://github.com/docker/cli #1 2.022 * [new tag] v20.10.11 -&amp;gt; v20.10.11 #1 DONE 2.9s { &amp;#34;group&amp;#34;: { &amp;#34;default&amp;#34;: { &amp;#34;targets&amp;#34;: [&amp;#34;binary&amp;#34;] } }, &amp;#34;target&amp;#34;: { &amp;#34;binary&amp;#34;: { &amp;#34;context&amp;#34;: &amp;#34;https://github.com/docker/cli.git#v20.10.11&amp;#34;, &amp;#34;dockerfile&amp;#34;: &amp;#34;Dockerfile&amp;#34;, &amp;#34;args&amp;#34;: { &amp;#34;BASE_VARIANT&amp;#34;: &amp;#34;alpine&amp;#34;, &amp;#34;GO_STRIP&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;VERSION&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;target&amp;#34;: &amp;#34;binary&amp;#34;, &amp;#34;platforms&amp;#34;: [&amp;#34;local&amp;#34;], &amp;#34;output&amp;#34;: [&amp;#34;build&amp;#34;] } } } As you can see the context is fixed to https://github.</description>
    </item>
    <item>
      <title>Using Bake with additional contexts</title>
      <link>https://docs.docker.com/build/bake/contexts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/contexts/</guid>
      <description>In addition to the main context key that defines the build context, each target can also define additional named contexts with a map defined with key contexts. These values map to the --build-context flag in the build command.&#xA;Inside the Dockerfile these contexts can be used with the FROM instruction or --from flag.&#xA;Supported context values are:&#xA;Local filesystem directories Container images Git URLs HTTP URLs Name of another target in the Bake file Pinning alpine image # syntax=docker/dockerfile:1 FROM alpine RUN echo &amp;#34;Hello world&amp;#34; # docker-bake.</description>
    </item>
    <item>
      <title>Variables in Bake</title>
      <link>https://docs.docker.com/build/bake/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/build/bake/variables/</guid>
      <description>You can define and use variables in a Bake file to set attribute values, interpolate them into other values, and perform arithmetic operations. Variables can be defined with default values, and can be overridden with environment variables.&#xA;Using variables as attribute values Use the variable block to define a variable.&#xA;variable &amp;#34;TAG&amp;#34; { default = &amp;#34;docker.io/username/webapp:latest&amp;#34; } The following example shows how to use the TAG variable in a target.</description>
    </item>
  </channel>
</rss>
