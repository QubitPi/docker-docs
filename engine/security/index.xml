<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker security on Docker Docs</title>
    <link>https://docs.docker.com/engine/security/</link>
    <description>Recent content in Docker security on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/engine/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Antivirus software and Docker</title>
      <link>https://docs.docker.com/engine/security/antivirus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/antivirus/</guid>
      <description>When antivirus software scans files used by Docker, these files may be locked in a way that causes Docker commands to hang.&#xA;One way to reduce these problems is to add the Docker data directory (/var/lib/docker on Linux, %ProgramData%\docker on Windows Server, or $HOME/Library/Containers/com.docker.docker/ on Mac) to the antivirus&#39;s exclusion list. However, this comes with the trade-off that viruses or malware in Docker images, writable layers of containers, or volumes are not detected.</description>
    </item>
    <item>
      <title>AppArmor security profiles for Docker</title>
      <link>https://docs.docker.com/engine/security/apparmor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/apparmor/</guid>
      <description>AppArmor (Application Armor) is a Linux security module that protects an operating system and its applications from security threats. To use it, a system administrator associates an AppArmor security profile with each program. Docker expects to find an AppArmor policy loaded and enforced.&#xA;Docker automatically generates and loads a default profile for containers named docker-default. The Docker binary generates this profile in tmpfs and then loads it into the kernel.</description>
    </item>
    <item>
      <title>Docker security non-events</title>
      <link>https://docs.docker.com/engine/security/non-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/non-events/</guid>
      <description>This page lists security vulnerabilities which Docker mitigated, such that processes run in Docker containers were never vulnerable to the bugâ€”even before it was fixed. This assumes containers are run without adding extra capabilities or not run as --privileged.&#xA;The list below is not even remotely complete. Rather, it is a sample of the few bugs we&#39;ve actually noticed to have attracted security review and publicly disclosed vulnerabilities. In all likelihood, the bugs that haven&#39;t been reported far outnumber those that have.</description>
    </item>
    <item>
      <title>Isolate containers with a user namespace</title>
      <link>https://docs.docker.com/engine/security/userns-remap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/userns-remap/</guid>
      <description>Linux namespaces provide isolation for running processes, limiting their access to system resources without the running process being aware of the limitations. For more information on Linux namespaces, see Linux namespaces.&#xA;The best way to prevent privilege-escalation attacks from within a container is to configure your container&#39;s applications to run as unprivileged users. For containers whose processes must run as the root user within the container, you can re-map this user to a less-privileged user on the Docker host.</description>
    </item>
    <item>
      <title>Protect the Docker daemon socket</title>
      <link>https://docs.docker.com/engine/security/protect-access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/protect-access/</guid>
      <description>By default, Docker runs through a non-networked UNIX socket. It can also optionally communicate using SSH or a TLS (HTTPS) socket.&#xA;Use SSH to protect the Docker daemon socket Note&#xA;The given USERNAME must have permissions to access the docker socket on the remote machine. Refer to manage Docker as a non-root user to learn how to give a non-root user access to the docker socket.&#xA;The following example creates a docker context to connect with a remote dockerd daemon on host1.</description>
    </item>
    <item>
      <title>Run the Docker daemon as a non-root user (Rootless mode)</title>
      <link>https://docs.docker.com/engine/security/rootless/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/rootless/</guid>
      <description>Rootless mode allows running the Docker daemon and containers as a non-root user to mitigate potential vulnerabilities in the daemon and the container runtime.&#xA;Rootless mode does not require root privileges even during the installation of the Docker daemon, as long as the prerequisites are met.&#xA;How it works Rootless mode executes the Docker daemon and containers inside a user namespace. This is very similar to userns-remap mode, except that with userns-remap mode, the daemon itself is running with root privileges, whereas in rootless mode, both the daemon and the container are running without root privileges.</description>
    </item>
    <item>
      <title>Seccomp security profiles for Docker</title>
      <link>https://docs.docker.com/engine/security/seccomp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/seccomp/</guid>
      <description>Secure computing mode (seccomp) is a Linux kernel feature. You can use it to restrict the actions available within the container. The seccomp() system call operates on the seccomp state of the calling process. You can use this feature to restrict your application&#39;s access.&#xA;This feature is available only if Docker has been built with seccomp and the kernel is configured with CONFIG_SECCOMP enabled. To check if your kernel supports seccomp:</description>
    </item>
    <item>
      <title>Verify repository client with certificates</title>
      <link>https://docs.docker.com/engine/security/certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/engine/security/certificates/</guid>
      <description>In Running Docker with HTTPS, you learned that, by default, Docker runs via a non-networked Unix socket and TLS must be enabled in order to have the Docker client and the daemon communicate securely over HTTPS. TLS ensures authenticity of the registry endpoint and that traffic to/from registry is encrypted.&#xA;This article demonstrates how to ensure the traffic between the Docker registry server and the Docker daemon (a client of the registry server) is encrypted and properly authenticated using certificate-based client-server authentication.</description>
    </item>
  </channel>
</rss>
