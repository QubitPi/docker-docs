<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Engine security on Docker Docs</title>
    <link>https://docker.qubitpi.org/engine/security/</link>
    <description>Recent content in Docker Engine security on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/engine/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rootless mode</title>
      <link>https://docker.qubitpi.org/engine/security/rootless/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/rootless/</guid>
      <description>&lt;p&gt;Rootless mode allows running the Docker daemon and containers as a non-root&#xA;user to mitigate potential vulnerabilities in the daemon and&#xA;the container runtime.&lt;/p&gt;&#xA;&lt;p&gt;Rootless mode does not require root privileges even during the installation of&#xA;the Docker daemon, as long as the &#xA;  &lt;a class=&#34;link&#34; href=&#34;#prerequisites&#34;&gt;prerequisites&lt;/a&gt; are met.&lt;/p&gt;&#xA;&#xA;&lt;h2 class=&#34; scroll-mt-20&#34; id=&#34;how-it-works&#34;&gt;&#xA;  &lt;a class=&#34;text-black dark:text-white no-underline hover:underline&#34; href=&#34;#how-it-works&#34;&gt;&#xA;    How it works&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Rootless mode executes the Docker daemon and containers inside a user namespace.&#xA;This is very similar to &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/engine/security/userns-remap/&#34;&gt;&lt;code&gt;userns-remap&lt;/code&gt; mode&lt;/a&gt;, except that&#xA;with &lt;code&gt;userns-remap&lt;/code&gt; mode, the daemon itself is running with root privileges,&#xA;whereas in rootless mode, both the daemon and the container are running without&#xA;root privileges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Antivirus software and Docker</title>
      <link>https://docker.qubitpi.org/engine/security/antivirus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/antivirus/</guid>
      <description>&lt;p&gt;When antivirus software scans files used by Docker, these files may be locked&#xA;in a way that causes Docker commands to hang.&lt;/p&gt;&#xA;&lt;p&gt;One way to reduce these problems is to add the Docker data directory&#xA;(&lt;code&gt;/var/lib/docker&lt;/code&gt; on Linux, &lt;code&gt;%ProgramData%\docker&lt;/code&gt; on Windows Server, or &lt;code&gt;$HOME/Library/Containers/com.docker.docker/&lt;/code&gt; on Mac) to the&#xA;antivirus&#39;s exclusion list. However, this comes with the trade-off that viruses&#xA;or malware in Docker images, writable layers of containers, or volumes are not&#xA;detected. If you do choose to exclude Docker&#39;s data directory from background&#xA;virus scanning, you may want to schedule a recurring task that stops Docker,&#xA;scans the data directory, and restarts Docker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AppArmor security profiles for Docker</title>
      <link>https://docker.qubitpi.org/engine/security/apparmor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/apparmor/</guid>
      <description>&lt;p&gt;AppArmor (Application Armor) is a Linux security module that protects an&#xA;operating system and its applications from security threats. To use it, a system&#xA;administrator associates an AppArmor security profile with each program. Docker&#xA;expects to find an AppArmor policy loaded and enforced.&lt;/p&gt;&#xA;&lt;p&gt;Docker automatically generates and loads a default profile for containers named&#xA;&lt;code&gt;docker-default&lt;/code&gt;. The Docker binary generates this profile in &lt;code&gt;tmpfs&lt;/code&gt; and then&#xA;loads it into the kernel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker security non-events</title>
      <link>https://docker.qubitpi.org/engine/security/non-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/non-events/</guid>
      <description>&lt;p&gt;This page lists security vulnerabilities which Docker mitigated, such that&#xA;processes run in Docker containers were never vulnerable to the bugâ€”even before&#xA;it was fixed. This assumes containers are run without adding extra capabilities&#xA;or not run as &lt;code&gt;--privileged&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The list below is not even remotely complete. Rather, it is a sample of the few&#xA;bugs we&#39;ve actually noticed to have attracted security review and publicly&#xA;disclosed vulnerabilities. In all likelihood, the bugs that haven&#39;t been&#xA;reported far outnumber those that have. Luckily, since Docker&#39;s approach to&#xA;secure by default through apparmor, seccomp, and dropping capabilities, it&#xA;likely mitigates unknown bugs just as well as it does known ones.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Isolate containers with a user namespace</title>
      <link>https://docker.qubitpi.org/engine/security/userns-remap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/userns-remap/</guid>
      <description>&lt;p&gt;Linux namespaces provide isolation for running processes, limiting their access&#xA;to system resources without the running process being aware of the limitations.&#xA;For more information on Linux namespaces, see&#xA;&#xA;  &lt;a&#xA;    class=&#34;link&#34;&#xA;    href=&#34;https://www.linux.com/news/understanding-and-securing-linux-namespaces&#34;&#xA;    rel=&#34;noopener&#34;&gt;Linux namespaces&lt;span class=&#34;pl-1 icon-svg icon-sm&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;48&#34; height=&#34;48&#34; viewBox=&#34;0 -960 960 960&#34;&gt;&lt;path d=&#34;M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h249q12.75 0 21.38 8.68 8.62 8.67 8.62 21.5 0 12.82-8.62 21.32-8.63 8.5-21.38 8.5H180v600h600v-249q0-12.75 8.68-21.38 8.67-8.62 21.5-8.62 12.82 0 21.32 8.62 8.5 8.63 8.5 21.38v249q0 24-18 42t-42 18H180Zm600-617L403-360q-9 9-21 8.5t-21-9.5q-9-9-9-21t9-21l377-377H549q-12.75 0-21.37-8.68-8.63-8.67-8.63-21.5 0-12.82 8.63-21.32 8.62-8.5 21.37-8.5h261q12.75 0 21.38 8.62Q840-822.75 840-810v261q0 12.75-8.68 21.37-8.67 8.63-21.5 8.63-12.82 0-21.32-8.63-8.5-8.62-8.5-21.37v-188Z&#34;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protect the Docker daemon socket</title>
      <link>https://docker.qubitpi.org/engine/security/protect-access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/protect-access/</guid>
      <description>&lt;p&gt;By default, Docker runs through a non-networked UNIX socket. It can also&#xA;optionally communicate using SSH or a TLS (HTTPS) socket.&lt;/p&gt;&#xA;&#xA;&lt;h2 class=&#34; scroll-mt-20&#34; id=&#34;use-ssh-to-protect-the-docker-daemon-socket&#34;&gt;&#xA;  &lt;a class=&#34;text-black dark:text-white no-underline hover:underline&#34; href=&#34;#use-ssh-to-protect-the-docker-daemon-socket&#34;&gt;&#xA;    Use SSH to protect the Docker daemon socket&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&#xA;    &#xA;    class=&#34;px-4 border-l-4 border-blue-light dark:border-blue-dark&#34;&gt;&#xA;    &lt;p class=&#34;flex gap-2 items-center text-blue-light dark:text-blue-dark&#34;&gt;&#xA;      &lt;span class=&#34;icon-svg pb-1&#34;&gt;&#xA;        &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;48&#34; height=&#34;48&#34; viewBox=&#34;0 -960 960 960&#34;&gt;&lt;path d=&#34;M483.18-280q12.82 0 21.32-8.63 8.5-8.62 8.5-21.37v-180q0-12.75-8.68-21.38-8.67-8.62-21.5-8.62-12.82 0-21.32 8.62-8.5 8.63-8.5 21.38v180q0 12.75 8.68 21.37 8.67 8.63 21.5 8.63Zm-3.2-314q14.02 0 23.52-9.2T513-626q0-14.45-9.48-24.22-9.48-9.78-23.5-9.78t-23.52 9.78Q447-640.45 447-626q0 13.6 9.48 22.8 9.48 9.2 23.5 9.2Zm.29 514q-82.74 0-155.5-31.5Q252-143 197.5-197.5t-86-127.34Q80-397.68 80-480.5t31.5-155.66Q143-709 197.5-763t127.34-85.5Q397.68-880 480.5-880t155.66 31.5Q709-817 763-763t85.5 127Q880-563 880-480.27q0 82.74-31.5 155.5Q817-252 763-197.68q-54 54.31-127 86Q563-80 480.27-80Z&#34;/&gt;&lt;/svg&gt;&#xA;      &lt;/span&gt;&#xA;      &lt;strong&gt;Note&lt;/strong&gt;&#xA;    &lt;/p&gt;</description>
    </item>
    <item>
      <title>Seccomp security profiles for Docker</title>
      <link>https://docker.qubitpi.org/engine/security/seccomp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/seccomp/</guid>
      <description>&lt;p&gt;Secure computing mode (&lt;code&gt;seccomp&lt;/code&gt;) is a Linux kernel feature. You can use it to&#xA;restrict the actions available within the container. The &lt;code&gt;seccomp()&lt;/code&gt; system&#xA;call operates on the seccomp state of the calling process. You can use this&#xA;feature to restrict your application&#39;s access.&lt;/p&gt;&#xA;&lt;p&gt;This feature is available only if Docker has been built with &lt;code&gt;seccomp&lt;/code&gt; and the&#xA;kernel is configured with &lt;code&gt;CONFIG_SECCOMP&lt;/code&gt; enabled. To check if your kernel&#xA;supports &lt;code&gt;seccomp&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Verify repository client with certificates</title>
      <link>https://docker.qubitpi.org/engine/security/certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/security/certificates/</guid>
      <description>&lt;p&gt;In &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/engine/security/protect-access/&#34;&gt;Running Docker with HTTPS&lt;/a&gt;, you learned that, by default,&#xA;Docker runs via a non-networked Unix socket and TLS must be enabled in order&#xA;to have the Docker client and the daemon communicate securely over HTTPS.  TLS ensures authenticity of the registry endpoint and that traffic to/from registry is encrypted.&lt;/p&gt;&#xA;&lt;p&gt;This article demonstrates how to ensure the traffic between the Docker registry&#xA;server and the Docker daemon (a client of the registry server) is encrypted and&#xA;properly authenticated using certificate-based client-server authentication.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
