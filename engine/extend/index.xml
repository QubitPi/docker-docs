<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Engine managed plugin system on Docker Docs</title>
    <link>https://docker.qubitpi.org/engine/extend/</link>
    <description>Recent content in Docker Engine managed plugin system on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/engine/extend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://docker.qubitpi.org/engine/extend/EBS_volume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/EBS_volume/</guid>
      <description>Volume plugin for Amazon EBS A proof-of-concept Rexray plugin In this example, a simple Rexray plugin will be created for the purposes of using it on an Amazon EC2 instance with EBS. It is not meant to be a complete Rexray plugin.&#xA;The example source is available at https://github.com/tiborvass/rexray-plugin.&#xA;To learn more about Rexray: https://github.com/codedellemc/rexray&#xA;1. Make a Docker image The following is the Dockerfile used to containerize rexray.</description>
    </item>
    <item>
      <title>Access authorization plugin</title>
      <link>https://docker.qubitpi.org/engine/extend/plugins_authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugins_authorization/</guid>
      <description>This document describes the Docker Engine plugins available in Docker Engine. To view information on plugins managed by Docker Engine, refer to Docker Engine plugin system.&#xA;Docker&#39;s out-of-the-box authorization model is all or nothing. Any user with permission to access the Docker daemon can run any Docker client command. The same is true for callers using Docker&#39;s Engine API to contact the daemon. If you require greater access control, you can create authorization plugins and add them to your Docker daemon configuration.</description>
    </item>
    <item>
      <title>Docker log driver plugins</title>
      <link>https://docker.qubitpi.org/engine/extend/plugins_logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugins_logging/</guid>
      <description>This document describes logging driver plugins for Docker.&#xA;Logging drivers enables users to forward container logs to another service for processing. Docker includes several logging drivers as built-ins, however can never hope to support all use-cases with built-in drivers. Plugins allow Docker to support a wide range of logging services without requiring to embed client libraries for these services in the main Docker codebase. See the plugin documentation for more information.</description>
    </item>
    <item>
      <title>Docker metrics collector plugins</title>
      <link>https://docker.qubitpi.org/engine/extend/plugins_metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugins_metrics/</guid>
      <description>Docker exposes internal metrics based on the Prometheus format. Metrics plugins enable accessing these metrics in a consistent way by providing a Unix socket at a predefined path where the plugin can scrape the metrics.&#xA;Note&#xA;While the plugin interface for metrics is non-experimental, the naming of the metrics and metric labels is still considered experimental and may change in a future version.&#xA;Creating a metrics plugin You must currently set PropagatedMount in the plugin config.</description>
    </item>
    <item>
      <title>Docker network driver plugins</title>
      <link>https://docker.qubitpi.org/engine/extend/plugins_network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugins_network/</guid>
      <description>This document describes Docker Engine network driver plugins generally available in Docker Engine. To view information on plugins managed by Docker Engine, refer to Docker Engine plugin system.&#xA;Docker Engine network plugins enable Engine deployments to be extended to support a wide range of networking technologies, such as VXLAN, IPVLAN, MACVLAN or something completely different. Network driver plugins are supported via the LibNetwork project. Each plugin is implemented as a &amp;quot;remote driver&amp;quot; for LibNetwork, which shares plugin infrastructure with Engine.</description>
    </item>
    <item>
      <title>Docker Plugin API</title>
      <link>https://docker.qubitpi.org/engine/extend/plugin_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugin_api/</guid>
      <description>Docker plugins are out-of-process extensions which add capabilities to the Docker Engine.&#xA;This document describes the Docker Engine plugin API. To view information on plugins managed by Docker Engine, refer to Docker Engine plugin system.&#xA;This page is intended for people who want to develop their own Docker plugin. If you just want to learn about or use Docker plugins, look here.&#xA;What plugins are A plugin is a process running on the same or a different host as the Docker daemon, which registers itself by placing a file on the daemon host in one of the plugin directories described in Plugin discovery.</description>
    </item>
    <item>
      <title>Docker volume plugins</title>
      <link>https://docker.qubitpi.org/engine/extend/plugins_volume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugins_volume/</guid>
      <description>Docker Engine volume plugins enable Engine deployments to be integrated with external storage systems such as Amazon EBS, and enable data volumes to persist beyond the lifetime of a single Docker host. See the plugin documentation for more information.&#xA;Changelog 1.13.0 If used as part of the v2 plugin architecture, mountpoints that are part of paths returned by the plugin must be mounted under the directory specified by PropagatedMount in the plugin configuration ( #26398) 1.</description>
    </item>
    <item>
      <title>Plugin Config Version 1 of Plugin V2</title>
      <link>https://docker.qubitpi.org/engine/extend/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/config/</guid>
      <description>This document outlines the format of the V0 plugin configuration.&#xA;Plugin configs describe the various constituents of a Docker engine plugin. Plugin configs can be serialized to JSON format with the following media types:&#xA;Config Type Media Type config application/vnd.docker.plugin.v1+json Config Field Descriptions Config provides the base accessible fields for working with V0 plugin format in the registry.&#xA;description string&#xA;Description of the plugin&#xA;documentation string&#xA;Link to the documentation about the plugin</description>
    </item>
    <item>
      <title>Plugins and Services</title>
      <link>https://docker.qubitpi.org/engine/extend/plugins_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/plugins_services/</guid>
      <description>Using Volume and Network plugins in Docker services In swarm mode, it is possible to create a service that allows for attaching to networks or mounting volumes that are backed by plugins. Swarm schedules services based on plugin availability on a node.&#xA;Volume plugins In this example, a volume plugin is installed on a swarm worker and a volume is created using the plugin. In the manager, a service is created with the relevant mount options.</description>
    </item>
    <item>
      <title>Use Docker Engine plugins</title>
      <link>https://docker.qubitpi.org/engine/extend/legacy_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/extend/legacy_plugins/</guid>
      <description>This document describes the Docker Engine plugins generally available in Docker Engine. To view information on plugins managed by Docker, refer to Docker Engine plugin system.&#xA;You can extend the capabilities of the Docker Engine by loading third-party plugins. This page explains the types of plugins and provides links to several volume and network plugins for Docker.&#xA;Types of plugins Plugins extend Docker&#39;s functionality. They come in specific types. For example, a volume plugin might enable Docker volumes to persist across multiple Docker hosts and a network plugin might provide network plumbing.</description>
    </item>
  </channel>
</rss>
