<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network drivers on Docker Docs</title>
    <link>https://docker.qubitpi.org/engine/network/drivers/</link>
    <description>Recent content in Network drivers on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/engine/network/drivers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bridge network driver</title>
      <link>https://docker.qubitpi.org/engine/network/drivers/bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/network/drivers/bridge/</guid>
      <description>&lt;p&gt;In terms of networking, a bridge network is a Link Layer device&#xA;which forwards traffic between network segments. A bridge can be a hardware&#xA;device or a software device running within a host machine&#39;s kernel.&lt;/p&gt;&#xA;&lt;p&gt;In terms of Docker, a bridge network uses a software bridge which lets&#xA;containers connected to the same bridge network communicate, while providing&#xA;isolation from containers that aren&#39;t connected to that bridge network. The&#xA;Docker bridge driver automatically installs rules in the host machine so that&#xA;containers on different bridge networks can&#39;t communicate directly with each&#xA;other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Host network driver</title>
      <link>https://docker.qubitpi.org/engine/network/drivers/host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/network/drivers/host/</guid>
      <description>&lt;p&gt;If you use the &lt;code&gt;host&lt;/code&gt; network mode for a container, that container&#39;s network&#xA;stack isn&#39;t isolated from the Docker host (the container shares the host&#39;s&#xA;networking namespace), and the container doesn&#39;t get its own IP-address allocated.&#xA;For instance, if you run a container which binds to port 80 and you use &lt;code&gt;host&lt;/code&gt;&#xA;networking, the container&#39;s application is available on port 80 on the host&#39;s IP&#xA;address.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&#xA;    &#xA;    class=&#34;px-4 border-l-4 border-blue-light dark:border-blue-dark&#34;&gt;&#xA;    &lt;p class=&#34;flex gap-2 items-center text-blue-light dark:text-blue-dark&#34;&gt;&#xA;      &lt;span class=&#34;icon-svg pb-1&#34;&gt;&#xA;        &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;48&#34; height=&#34;48&#34; viewBox=&#34;0 -960 960 960&#34;&gt;&lt;path d=&#34;M483.18-280q12.82 0 21.32-8.63 8.5-8.62 8.5-21.37v-180q0-12.75-8.68-21.38-8.67-8.62-21.5-8.62-12.82 0-21.32 8.62-8.5 8.63-8.5 21.38v180q0 12.75 8.68 21.37 8.67 8.63 21.5 8.63Zm-3.2-314q14.02 0 23.52-9.2T513-626q0-14.45-9.48-24.22-9.48-9.78-23.5-9.78t-23.52 9.78Q447-640.45 447-626q0 13.6 9.48 22.8 9.48 9.2 23.5 9.2Zm.29 514q-82.74 0-155.5-31.5Q252-143 197.5-197.5t-86-127.34Q80-397.68 80-480.5t31.5-155.66Q143-709 197.5-763t127.34-85.5Q397.68-880 480.5-880t155.66 31.5Q709-817 763-763t85.5 127Q880-563 880-480.27q0 82.74-31.5 155.5Q817-252 763-197.68q-54 54.31-127 86Q563-80 480.27-80Z&#34;/&gt;&lt;/svg&gt;&#xA;      &lt;/span&gt;&#xA;      &lt;strong&gt;Note&lt;/strong&gt;&#xA;    &lt;/p&gt;</description>
    </item>
    <item>
      <title>IPvlan network driver</title>
      <link>https://docker.qubitpi.org/engine/network/drivers/ipvlan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/network/drivers/ipvlan/</guid>
      <description>&lt;p&gt;The IPvlan driver gives users total control over both IPv4 and IPv6 addressing.&#xA;The VLAN driver builds on top of that in giving operators complete control of&#xA;layer 2 VLAN tagging and even IPvlan L3 routing for users interested in underlay&#xA;network integration. For overlay deployments that abstract away physical constraints&#xA;see the &#xA;    &#xA;    &#xA;  &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/engine/network/tutorials/overlay/&#34;&gt;multi-host overlay&lt;/a&gt; driver.&lt;/p&gt;&#xA;&lt;p&gt;IPvlan is a new twist on the tried and true network virtualization technique.&#xA;The Linux implementations are extremely lightweight because rather than using&#xA;the traditional Linux bridge for isolation, they are associated to a Linux&#xA;Ethernet interface or sub-interface to enforce separation between networks and&#xA;connectivity to the physical network.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macvlan network driver</title>
      <link>https://docker.qubitpi.org/engine/network/drivers/macvlan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/network/drivers/macvlan/</guid>
      <description>&lt;p&gt;Some applications, especially legacy applications or applications which monitor&#xA;network traffic, expect to be directly connected to the physical network. In&#xA;this type of situation, you can use the &lt;code&gt;macvlan&lt;/code&gt; network driver to assign a MAC&#xA;address to each container&#39;s virtual network interface, making it appear to be&#xA;a physical network interface directly connected to the physical network. In this&#xA;case, you need to designate a physical interface on your Docker host to use for&#xA;the Macvlan, as well as the subnet and gateway of the network. You can even&#xA;isolate your Macvlan networks using different physical network interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>None network driver</title>
      <link>https://docker.qubitpi.org/engine/network/drivers/none/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/network/drivers/none/</guid>
      <description>&lt;p&gt;If you want to completely isolate the networking stack of a container, you can&#xA;use the &lt;code&gt;--network none&lt;/code&gt; flag when starting the container. Within the container,&#xA;only the loopback device is created.&lt;/p&gt;&#xA;&lt;p&gt;The following example shows the output of &lt;code&gt;ip link show&lt;/code&gt; in an &lt;code&gt;alpine&lt;/code&gt;&#xA;container using the &lt;code&gt;none&lt;/code&gt; network driver.&lt;/p&gt;&#xA;&lt;div data-pagefind-ignore class=&#34;scroll-mt-20&#34; x-data x-ref=&#34;root&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;group relative&#34;&gt;&#xA;    &lt;button x-data=&#34;{ code: &#39;JCBkb2NrZXIgcnVuIC0tcm0gLS1uZXR3b3JrIG5vbmUgYWxwaW5lOmxhdGVzdCBpcCBsaW5rIHNob3cKMTogbG86IDxMT09QQkFDSyxVUCxMT1dFUl9VUD4gbXR1IDY1NTM2IHFkaXNjIG5vcXVldWUgc3RhdGUgVU5LTk9XTiBxbGVuIDEwMDAKICAgIGxpbmsvbG9vcGJhY2sgMDA6MDA6MDA6MDA6MDA6MDAgYnJkIDAwOjAwOjAwOjAwOjAwOjAw&#39;, copying: false }&#34;&#xA;      class=&#34;absolute right-3 top-3 z-10 text-gray-light-300 dark:text-gray-dark-600&#34; title=&#34;copy&#34; @click=&#34;window.navigator.clipboard.writeText(atob(code).replaceAll(/^[\$&gt;]\s+/gm, &#39;&#39;));&#xA;      copying = true;&#xA;      setTimeout(() =&gt; copying = false, 2000);&#34;&gt;&#xA;      &lt;span :class=&#34;{ &#39;group-hover:block&#39; : !copying }&#34; class=&#34;icon-svg hidden&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;48&#34; height=&#34;48&#34; viewBox=&#34;0 -960 960 960&#34;&gt;&lt;path d=&#34;M300-200q-24 0-42-18t-18-42v-560q0-24 18-42t42-18h440q24 0 42 18t18 42v560q0 24-18 42t-42 18H300ZM180-80q-24 0-42-18t-18-42v-590q0-13 8.5-21.5T150-760q13 0 21.5 8.5T180-730v590h470q13 0 21.5 8.5T680-110q0 13-8.5 21.5T650-80H180Z&#34;/&gt;&lt;/svg&gt;&lt;/span&gt;&#xA;      &lt;span :class=&#34;{ &#39;group-hover:block&#39; : copying }&#34; class=&#34;icon-svg hidden&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;48&#34; height=&#34;48&#34; viewBox=&#34;0 -960 960 960&#34;&gt;&lt;path d=&#34;m421-389-98-98q-9-9-22-9t-23 10q-9 9-9 22t9 22l122 123q9 9 21 9t21-9l239-239q10-10 10-23t-10-23q-10-9-23.5-8.5T635-603L421-389Zm59 309q-82 0-155-31.5t-127.5-86Q143-252 111.5-325T80-480q0-83 31.5-156t86-127Q252-817 325-848.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 82-31.5 155T763-197.5q-54 54.5-127 86T480-80Z&#34;/&gt;&lt;/svg&gt;&lt;/span&gt;&#xA;    &lt;/button&gt;&#xA;     &#xA;    &lt;div class=&#34;syntax-light dark:syntax-dark&#34;&gt;&#xA;      &#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; docker run --rm --network none alpine:latest ip link show&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;      &#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;No IPv6 loopback address is configured for containers using the &lt;code&gt;none&lt;/code&gt; driver.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overlay network driver</title>
      <link>https://docker.qubitpi.org/engine/network/drivers/overlay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/network/drivers/overlay/</guid>
      <description>&lt;p&gt;The &lt;code&gt;overlay&lt;/code&gt; network driver creates a distributed network among multiple&#xA;Docker daemon hosts. This network sits on top of (overlays) the host-specific&#xA;networks, allowing containers connected to it to communicate securely when&#xA;encryption is enabled. Docker transparently handles routing of each packet to&#xA;and from the correct Docker daemon host and the correct destination container.&lt;/p&gt;&#xA;&lt;p&gt;You can create user-defined &lt;code&gt;overlay&lt;/code&gt; networks using &lt;code&gt;docker network create&lt;/code&gt;,&#xA;in the same way that you can create user-defined &lt;code&gt;bridge&lt;/code&gt; networks. Services&#xA;or containers can be connected to more than one network at a time. Services or&#xA;containers can only communicate across networks they&#39;re each connected to.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
