<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP language-specific guide on Docker Docs</title>
    <link>https://docker.qubitpi.org/language/php/</link>
    <description>Recent content in PHP language-specific guide on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/language/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure CI/CD for your PHP application</title>
      <link>https://docker.qubitpi.org/language/php/configure-ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/language/php/configure-ci-cd/</guid>
      <description>Prerequisites Complete all the previous sections of this guide, starting with Containerize a PHP application. You must have a GitHub account and a Docker account to complete this section.&#xA;Overview In this section, you&#39;ll learn how to set up and use GitHub Actions to build and test your Docker image as well as push it to Docker Hub. You will complete the following steps:&#xA;Create a new repository on GitHub.</description>
    </item>
    <item>
      <title>Containerize a PHP application</title>
      <link>https://docker.qubitpi.org/language/php/containerize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/language/php/containerize/</guid>
      <description>Prerequisites You have installed the latest version of Docker Desktop. You have a git client. The examples in this section use a command-line based git client, but you can use any client. Overview This section walks you through containerizing and running a PHP application.&#xA;Get the sample applications In this guide, you will use a pre-built PHP application. The application uses Composer for library dependency management. You&#39;ll serve the application via an Apache web server.</description>
    </item>
    <item>
      <title>Run PHP tests in a container</title>
      <link>https://docker.qubitpi.org/language/php/run-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/language/php/run-tests/</guid>
      <description>Prerequisites Complete all the previous sections of this guide, starting with Containerize a PHP application.&#xA;Overview Testing is an essential part of modern software development. Testing can mean a lot of things to different development teams. There are unit tests, integration tests and end-to-end testing. In this guide you take a look at running your unit tests in Docker when developing and when building.&#xA;Run tests when developing locally The sample application already has a PHPUnit test inside the tests directory.</description>
    </item>
    <item>
      <title>Test your PHP deployment</title>
      <link>https://docker.qubitpi.org/language/php/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/language/php/deploy/</guid>
      <description>Prerequisites Complete all the previous sections of this guide, starting with Containerize a PHP application. Turn on Kubernetes in Docker Desktop. Overview In this section, you&#39;ll learn how to use Docker Desktop to deploy your application to a fully-featured Kubernetes environment on your development machine. This allows you to test and debug your workloads on Kubernetes locally before deploying.&#xA;Create a Kubernetes YAML file In your docker-php-sample directory, create a file named docker-php-kubernetes.</description>
    </item>
    <item>
      <title>Use containers for PHP development</title>
      <link>https://docker.qubitpi.org/language/php/develop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/language/php/develop/</guid>
      <description>Prerequisites Complete Containerize a PHP application.&#xA;Overview In this section, you&#39;ll learn how to set up a development environment for your containerized application. This includes:&#xA;Adding a local database and persisting data Adding phpMyAdmin to interact with the database Configuring Compose to automatically update your running Compose services as you edit and save your code Creating a development container that contains the dev dependencies Add a local database and persist data You can use containers to set up local services, like a database.</description>
    </item>
  </channel>
</rss>
