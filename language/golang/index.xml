<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go language-specific guide on Docker Docs</title>
    <link>https://docs.docker.com/language/golang/</link>
    <description>Recent content in Go language-specific guide on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/language/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build your Go image</title>
      <link>https://docs.docker.com/language/golang/build-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/golang/build-images/</guid>
      <description>Overview In this section you&#39;re going to build a container image. The image includes everything you need to run your application â€“ the compiled application binary file, the runtime, the libraries, and all other resources required by your application.&#xA;Required software To complete this tutorial, you need the following:&#xA;Docker running locally. Follow the instructions to download and install Docker. An IDE or a text editor to edit files. Visual Studio Code is a free and popular choice but you can use anything you feel comfortable with.</description>
    </item>
    <item>
      <title>Configure CI/CD for your Go application</title>
      <link>https://docs.docker.com/language/golang/configure-ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/golang/configure-ci-cd/</guid>
      <description>Prerequisites Complete the previous sections of this guide, starting with Build your Go image. You must have a GitHub account and a Docker account to complete this section.&#xA;Overview In this section, you&#39;ll learn how to set up and use GitHub Actions to build and push your Docker image to Docker Hub. You will complete the following steps:&#xA;Create a new repository on GitHub. Define the GitHub Actions workflow. Run the workflow.</description>
    </item>
    <item>
      <title>Run your Go image as a container</title>
      <link>https://docs.docker.com/language/golang/run-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/golang/run-containers/</guid>
      <description>Prerequisites Work through the steps to containerize a Go application in Build your Go image.&#xA;Overview In the previous module you created a Dockerfile for your example application and then you created your Docker image using the command docker build. Now that you have the image, you can run that image and see if your application is running correctly.&#xA;A container is a normal operating system process except that this process is isolated and has its own file system, its own networking, and its own isolated process tree separate from the host.</description>
    </item>
    <item>
      <title>Run your tests using Go test</title>
      <link>https://docs.docker.com/language/golang/run-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/golang/run-tests/</guid>
      <description>Prerequisites Complete the Build your Go image section of this guide.&#xA;Overview Testing is an essential part of modern software development. Testing can mean a lot of things to different development teams. There are unit tests, integration tests and end-to-end testing. In this guide you take a look at running your unit tests in Docker when building.&#xA;For this section, use the docker-gs-ping project that you cloned in Build your Go image.</description>
    </item>
    <item>
      <title>Test your Go deployment</title>
      <link>https://docs.docker.com/language/golang/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/golang/deploy/</guid>
      <description>Prerequisites Complete all the previous sections of this guide, starting with Build your Go image. Turn on Kubernetes in Docker Desktop. Overview In this section, you&#39;ll learn how to use Docker Desktop to deploy your application to a fully-featured Kubernetes environment on your development machine. This allows you to test and debug your workloads on Kubernetes locally before deploying.&#xA;Create a Kubernetes YAML file In your project directory, create a file named docker-go-kubernetes.</description>
    </item>
    <item>
      <title>Use containers for Go development</title>
      <link>https://docs.docker.com/language/golang/develop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/golang/develop/</guid>
      <description>Prerequisites Work through the steps of the run your image as a container module to learn how to manage the lifecycle of your containers.&#xA;Introduction In this module, you&#39;ll take a look at running a database engine in a container and connecting it to the extended version of the example application. You are going to see some options for keeping persistent data and for wiring up the containers to talk to one another.</description>
    </item>
  </channel>
</rss>
