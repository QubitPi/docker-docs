<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java language-specific guide on Docker Docs</title>
    <link>https://docs.docker.com/language/java/</link>
    <description>Recent content in Java language-specific guide on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/language/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure CI/CD for your Java application</title>
      <link>https://docs.docker.com/language/java/configure-ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/java/configure-ci-cd/</guid>
      <description>Prerequisites Complete the previous sections of this guide, starting with Containerize your app. You must have a GitHub account and a Docker account to complete this section.&#xA;Overview In this section, you&#39;ll learn how to set up and use GitHub Actions to build and push your Docker image to Docker Hub. You will complete the following steps:&#xA;Create a new repository on GitHub. Define the GitHub Actions workflow. Run the workflow.</description>
    </item>
    <item>
      <title>Containerize a Java application</title>
      <link>https://docs.docker.com/language/java/containerize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/java/containerize/</guid>
      <description>Prerequisites You have installed the latest version of Docker Desktop. Docker adds new features regularly and some parts of this guide may work only with the latest version of Docker Desktop. You have a Git client. The examples in this section use a command-line based Git client, but you can use any client. Overview This section walks you through containerizing and running a Java application.&#xA;Get the sample applications Clone the sample application that you&#39;ll be using to your local development machine.</description>
    </item>
    <item>
      <title>Run your Java tests</title>
      <link>https://docs.docker.com/language/java/run-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/java/run-tests/</guid>
      <description>Prerequisites Complete all the previous sections of this guide, starting with Containerize a Java application.&#xA;Overview Testing is an essential part of modern software development. Testing can mean a lot of things to different development teams. There are unit tests, integration tests and end-to-end testing. In this guide you&#39;ll take a look at running your unit tests in Docker.&#xA;Multi-stage Dockerfile for testing In the following example, you&#39;ll pull the testing commands into your Dockerfile.</description>
    </item>
    <item>
      <title>Test your Java deployment</title>
      <link>https://docs.docker.com/language/java/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/java/deploy/</guid>
      <description>Prerequisites Complete all the previous sections of this guide, starting with Containerize your app. Turn on Kubernetes in Docker Desktop. Overview In this section, you&#39;ll learn how to use Docker Desktop to deploy your application to a fully-featured Kubernetes environment on your development machine. This lets you test and debug your workloads on Kubernetes locally before deploying.&#xA;Create a Kubernetes YAML file In your spring-petclinic directory, create a file named docker-java-kubernetes.</description>
    </item>
    <item>
      <title>Use containers for Java development</title>
      <link>https://docs.docker.com/language/java/develop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/language/java/develop/</guid>
      <description>Prerequisites Work through the steps to containerize your application in Containerize your app.&#xA;Overview In this section, youâ€™ll walk through setting up a local development environment for the application you containerized in the previous section. This includes:&#xA;Adding a local database and persisting data Creating a development container to connect a debugger Configuring Compose to automatically update your running Compose services as you edit and save your code Add a local database and persist data You can use containers to set up local services, like a database.</description>
    </item>
  </channel>
</rss>
