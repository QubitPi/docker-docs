<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>View container logs on Docker Docs</title>
    <link>https://docs.docker.com/config/containers/logging/</link>
    <description>Recent content in View container logs on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/config/containers/logging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazon CloudWatch Logs logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/awslogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/awslogs/</guid>
      <description>The awslogs logging driver sends container logs to Amazon CloudWatch Logs. Log entries can be retrieved through the AWS Management Console or the AWS SDKs and Command Line Tools.&#xA;Usage To use the awslogs driver as the default logging driver, set the log-driver and log-opt keys to appropriate values in the daemon.json file, which is located in /etc/docker/ on Linux hosts or C:\ProgramData\docker\config\daemon.json on Windows Server. For more about configuring Docker using daemon.</description>
    </item>
    <item>
      <title>Configure logging drivers</title>
      <link>https://docs.docker.com/config/containers/logging/configure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/configure/</guid>
      <description>Docker includes multiple logging mechanisms to help you get information from running containers and services. These mechanisms are called logging drivers. Each Docker daemon has a default logging driver, which each container uses unless you configure it to use a different logging driver, or log driver for short.&#xA;As a default, Docker uses the json-file logging driver, which caches container logs as JSON internally. In addition to using the logging drivers included with Docker, you can also implement and use logging driver plugins.</description>
    </item>
    <item>
      <title>Customize log driver output</title>
      <link>https://docs.docker.com/config/containers/logging/log_tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/log_tags/</guid>
      <description>The tag log option specifies how to format a tag that identifies the container&#39;s log messages. By default, the system uses the first 12 characters of the container ID. To override this behavior, specify a tag option:&#xA;$ docker run --log-driver=fluentd --log-opt fluentd-address=myhost.local:24224 --log-opt tag=&amp;#34;mailer&amp;#34; Docker supports some special template markup you can use when specifying a tag&#39;s value:&#xA;Markup Description {{.ID}} The first 12 characters of the container ID. {{.</description>
    </item>
    <item>
      <title>ETW logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/etwlogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/etwlogs/</guid>
      <description>The Event Tracing for Windows (ETW) logging driver forwards container logs as ETW events. ETW stands for Event Tracing in Windows, and is the common framework for tracing applications in Windows. Each ETW event contains a message with both the log and its context information. A client can then create an ETW listener to listen to these events.&#xA;The ETW provider that this logging driver registers with Windows, has the GUID identifier of: {a3693192-9ed6-46d2-a981-f8226c8363bd}.</description>
    </item>
    <item>
      <title>Fluentd logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/fluentd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/fluentd/</guid>
      <description>The fluentd logging driver sends container logs to the Fluentd collector as structured log data. Then, users can use any of the various output plugins of Fluentd to write these logs to various destinations.&#xA;In addition to the log message itself, the fluentd log driver sends the following metadata in the structured log message:&#xA;Field Description container_id The full 64-character container ID. container_name The container name at the time it was started.</description>
    </item>
    <item>
      <title>Google Cloud Logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/gcplogs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/gcplogs/</guid>
      <description>The Google Cloud Logging driver sends container logs to Google Cloud Logging Logging.&#xA;Usage To use the gcplogs driver as the default logging driver, set the log-driver and log-opt keys to appropriate values in the daemon.json file, which is located in /etc/docker/ on Linux hosts or C:\ProgramData\docker\config\daemon.json on Windows Server. For more about configuring Docker using daemon.json, see daemon.json.&#xA;The following example sets the log driver to gcplogs and sets the gcp-meta-name option.</description>
    </item>
    <item>
      <title>Graylog Extended Format logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/gelf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/gelf/</guid>
      <description>The gelf logging driver is a convenient format that&#39;s understood by a number of tools such as Graylog, Logstash, and Fluentd. Many tools use this format.&#xA;In GELF, every log message is a dict with the following fields:&#xA;Version Host (who sent the message in the first place) Timestamp Short and long version of the message Any custom fields you configure yourself Usage To use the gelf driver as the default logging driver, set the log-driver and log-opt keys to appropriate values in the daemon.</description>
    </item>
    <item>
      <title>Journald logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/journald/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/journald/</guid>
      <description>The journald logging driver sends container logs to the systemd journal. Log entries can be retrieved using the journalctl command, through use of the journal API, or using the docker logs command.&#xA;In addition to the text of the log message itself, the journald log driver stores the following metadata in the journal with each message:&#xA;Field Description CONTAINER_ID The container ID truncated to 12 characters. CONTAINER_ID_FULL The full 64-character container ID.</description>
    </item>
    <item>
      <title>JSON File logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/json-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/json-file/</guid>
      <description>By default, Docker captures the standard output (and standard error) of all your containers, and writes them in files using the JSON format. The JSON format annotates each line with its origin (stdout or stderr) and its timestamp. Each log file contains information about only one container.&#xA;{ &amp;#34;log&amp;#34;: &amp;#34;Log line is here\n&amp;#34;, &amp;#34;stream&amp;#34;: &amp;#34;stdout&amp;#34;, &amp;#34;time&amp;#34;: &amp;#34;2019-01-01T11:11:11.111111111Z&amp;#34; } Warning&#xA;The json-file logging driver uses file-based storage. These files are designed to be exclusively accessed by the Docker daemon.</description>
    </item>
    <item>
      <title>Local file logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/local/</guid>
      <description>The local logging driver captures output from container&#39;s stdout/stderr and writes them to an internal storage that&#39;s optimized for performance and disk use.&#xA;By default, the local driver preserves 100MB of log messages per container and uses automatic compression to reduce the size on disk. The 100MB default value is based on a 20M default size for each file and a default count of 5 for the number of such files (to account for log rotation).</description>
    </item>
    <item>
      <title>Splunk logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/splunk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/splunk/</guid>
      <description>The splunk logging driver sends container logs to HTTP Event Collector in Splunk Enterprise and Splunk Cloud.&#xA;Usage You can configure Docker logging to use the splunk driver by default or on a per-container basis.&#xA;To use the splunk driver as the default logging driver, set the keys log-driver and log-opts to appropriate values in the daemon.json configuration file and restart Docker. For example:&#xA;{ &amp;#34;log-driver&amp;#34;: &amp;#34;splunk&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;splunk-token&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;splunk-url&amp;#34;: &amp;#34;&amp;#34;, .</description>
    </item>
    <item>
      <title>Syslog logging driver</title>
      <link>https://docs.docker.com/config/containers/logging/syslog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/syslog/</guid>
      <description>The syslog logging driver routes logs to a syslog server. The syslog protocol uses a raw string as the log message and supports a limited set of metadata. The syslog message must be formatted in a specific way to be valid. From a valid message, the receiver can extract the following information:&#xA;Priority: the logging level, such as debug, warning, error, info. Timestamp: when the event occurred. Hostname: where the event happened.</description>
    </item>
    <item>
      <title>Use a logging driver plugin</title>
      <link>https://docs.docker.com/config/containers/logging/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/plugins/</guid>
      <description>Docker logging plugins allow you to extend and customize Docker&#39;s logging capabilities beyond those of the built-in logging drivers. A logging service provider can implement their own plugins and make them available on Docker Hub, or a private registry. This topic shows how a user of that logging service can configure Docker to use the plugin.&#xA;Install the logging driver plugin To install a logging driver plugin, use docker plugin install &amp;lt;org/image&amp;gt;, using the information provided by the plugin developer.</description>
    </item>
    <item>
      <title>Use docker logs with remote logging drivers</title>
      <link>https://docs.docker.com/config/containers/logging/dual-logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/config/containers/logging/dual-logging/</guid>
      <description>Overview You can use the docker logs command to read container logs regardless of the configured logging driver or plugin. Docker Engine uses the local logging driver to act as cache for reading the latest logs of your containers. This is called dual logging. By default, the cache has log-file rotation enabled, and is limited to a maximum of 5 files of 20 MB each (before compression) per container.</description>
    </item>
  </channel>
</rss>
