<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Best practices on Docker Docs</title>
    <link>https://docker.qubitpi.org/tags/best-practices/</link>
    <description>Recent content in Best practices on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/tags/best-practices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Best practices</title>
      <link>https://docker.qubitpi.org/desktop/wsl/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/desktop/wsl/best-practices/</guid>
      <description>Always use the latest version of WSL. At a minimum you must use WSL version 1.1.3.0., otherwise Docker Desktop may not work as expected. Testing, development, and documentation is based on the newest kernel versions. Older versions of WSL can cause:&#xA;Docker Desktop to hang periodically or when upgrading Deployment via SCCM to fail The vmmem.exe to consume all memory Network filter policies to be applied globally, not to specific objects GPU failures with containers To get the best out of the file system performance when bind-mounting files, it&#39;s recommended that you store source code and other data that is bind-mounted into Linux containers.</description>
    </item>
    <item>
      <title>Best practices for working with environment variables in Docker Compose</title>
      <link>https://docker.qubitpi.org/compose/environment-variables/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/environment-variables/best-practices/</guid>
      <description>Handle sensitive information securely Be cautious about including sensitive data in environment variables. Consider using Secrets for managing sensitive information.&#xA;Understand environment variable precedence Be aware of how Docker Compose handles the precedence of environment variables from different sources (.env files, shell variables, Dockerfiles).&#xA;Use specific environment files Consider how your application adapts to different environments. For example development, testing, production, and use different .env files as needed.&#xA;Know interpolation Understand how interpolation works within compose files for dynamic configurations.</description>
    </item>
    <item>
      <title>Building best practices</title>
      <link>https://docker.qubitpi.org/build/building/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/building/best-practices/</guid>
      <description>Use multi-stage builds Multi-stage builds let you reduce the size of your final image, by creating a cleaner separation between the building of your image and the final output. Split your Dockerfile instructions into distinct stages to make sure that the resulting output only contains the files that&#39;s needed to run the application.&#xA;Using multiple stages can also let you build more efficiently by executing build steps in parallel.</description>
    </item>
  </channel>
</rss>
