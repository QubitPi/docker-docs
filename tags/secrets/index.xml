<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secrets on Docker Docs</title>
    <link>https://docker.qubitpi.org/tags/secrets/</link>
    <description>Recent content in Secrets on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/tags/secrets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build secrets</title>
      <link>https://docker.qubitpi.org/build/building/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/building/secrets/</guid>
      <description>&lt;p&gt;A build secret is any piece of sensitive information, such as a password or API&#xA;token, consumed as part of your application&#39;s build process.&lt;/p&gt;&#xA;&lt;p&gt;Build arguments and environment variables are inappropriate for passing secrets&#xA;to your build, because they persist in the final image. Instead, you should use&#xA;secret mounts or SSH mounts, which expose secrets to your builds securely.&lt;/p&gt;&#xA;&#xA;&lt;h2 class=&#34; scroll-mt-20&#34; id=&#34;types-of-build-secrets&#34;&gt;&#xA;  &lt;a class=&#34;text-black dark:text-white no-underline hover:underline&#34; href=&#34;#types-of-build-secrets&#34;&gt;&#xA;    Types of build secrets&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a class=&#34;link&#34; href=&#34;#secret-mounts&#34;&gt;Secret mounts&lt;/a&gt; are general-purpose mounts for passing&#xA;secrets into your build. A secret mount takes a secret from the build client&#xA;and makes it temporarily available inside the build container, for the&#xA;duration of the build instruction. This is useful if, for example, your build&#xA;needs to communicate with a private artifact server or API.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a class=&#34;link&#34; href=&#34;#ssh-mounts&#34;&gt;SSH mounts&lt;/a&gt; are special-purpose mounts for making SSH sockets&#xA;or keys available inside builds. They&#39;re commonly used when you need to fetch&#xA;private Git repositories in your builds.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a class=&#34;link&#34; href=&#34;#git-authentication-for-remote-contexts&#34;&gt;Git authentication for remote contexts&lt;/a&gt;&#xA;is a set of pre-defined secrets for when you build with a remote Git context&#xA;that&#39;s also a private repository. These secrets are &amp;quot;pre-flight&amp;quot; secrets:&#xA;they are not consumed within your build instruction, but they&#39;re used to&#xA;provide the builder with the necessary credentials to fetch the context.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2 class=&#34; scroll-mt-20&#34; id=&#34;using-build-secrets&#34;&gt;&#xA;  &lt;a class=&#34;text-black dark:text-white no-underline hover:underline&#34; href=&#34;#using-build-secrets&#34;&gt;&#xA;    Using build secrets&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For secret mounts and SSH mounts, using build secrets is a two-step process.&#xA;First you need to pass the secret into the &lt;code&gt;docker build&lt;/code&gt; command, and then you&#xA;need to consume the secret in your Dockerfile.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use secrets in Docker Compose</title>
      <link>https://docker.qubitpi.org/compose/how-tos/use-secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/how-tos/use-secrets/</guid>
      <description>&lt;p&gt;A secret is any piece of data, such as a password, certificate, or API key, that shouldn’t be transmitted over a network or stored unencrypted in a Dockerfile or in your application’s source code.&lt;/p&gt;&#xA;&#xA;&#xA;  &lt;p&gt;Docker Compose provides a way for you to use secrets without having to use environment variables to store information. If you’re injecting passwords and API keys as environment variables, you risk unintentional information exposure. Services can only access secrets when explicitly granted by a &lt;code&gt;secrets&lt;/code&gt; attribute within the &lt;code&gt;services&lt;/code&gt; top-level element.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using secrets with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/secrets/</guid>
      <description>&lt;p&gt;A build secret is sensitive information, such as a password or API token, consumed as part of the build process.&#xA;Docker Build supports two forms of secrets:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a class=&#34;link&#34; href=&#34;#secret-mounts&#34;&gt;Secret mounts&lt;/a&gt; add secrets as files in the build container&#xA;(under &lt;code&gt;/run/secrets&lt;/code&gt; by default).&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a class=&#34;link&#34; href=&#34;#ssh-mounts&#34;&gt;SSH mounts&lt;/a&gt; add SSH agent sockets or keys into the build container.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This page shows how to use secrets with GitHub Actions.&#xA;For an introduction to secrets in general, see &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/build/building/secrets/&#34;&gt;Build secrets&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Manage sensitive data with Docker secrets</title>
      <link>https://docker.qubitpi.org/engine/swarm/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/swarm/secrets/</guid>
      <description>&lt;h2 class=&#34; scroll-mt-20&#34; id=&#34;about-secrets&#34;&gt;&#xA;  &lt;a class=&#34;text-black dark:text-white no-underline hover:underline&#34; href=&#34;#about-secrets&#34;&gt;&#xA;    About secrets&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;In terms of Docker Swarm services, a &lt;em&gt;secret&lt;/em&gt; is a blob of data, such as a&#xA;password, SSH private key, SSL certificate, or another piece of data that should&#xA;not be transmitted over a network or stored unencrypted in a Dockerfile or in&#xA;your application&#39;s source code. You can use Docker &lt;em&gt;secrets&lt;/em&gt; to centrally manage&#xA;this data and securely transmit it to only those containers that need access to&#xA;it. Secrets are encrypted during transit and at rest in a Docker swarm. A given&#xA;secret is only accessible to those services which have been granted explicit&#xA;access to it, and only while those service tasks are running.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
