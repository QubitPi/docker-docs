<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secrets on Docker Docs</title>
    <link>https://docker.qubitpi.org/tags/secrets/</link>
    <description>Recent content in Secrets on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/tags/secrets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build secrets</title>
      <link>https://docker.qubitpi.org/build/building/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/building/secrets/</guid>
      <description>A build secret is any piece of sensitive information, such as a password or API token, consumed as part of your application&#39;s build process.&#xA;Build arguments and environment variables are inappropriate for passing secrets to your build, because they persist in the final image. Instead, you should use secret mounts or SSH mounts, which expose secrets to your builds securely.&#xA;Secret mounts Secret mounts expose secrets to the build containers as files.</description>
    </item>
    <item>
      <title>How to use secrets in Docker Compose</title>
      <link>https://docker.qubitpi.org/compose/use-secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/use-secrets/</guid>
      <description>A secret is any piece of data, such as a password, certificate, or API key, that shouldn’t be transmitted over a network or stored unencrypted in a Dockerfile or in your application’s source code.&#xA;Docker Compose provides a way for you to use secrets without having to use environment variables to store information. If you’re injecting passwords and API keys as environment variables, you risk unintentional information exposure. Services can only access secrets when explicitly granted by a secrets attribute within the services top-level element.</description>
    </item>
    <item>
      <title>Manage sensitive data with Docker secrets</title>
      <link>https://docker.qubitpi.org/engine/swarm/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/engine/swarm/secrets/</guid>
      <description>About secrets In terms of Docker Swarm services, a secret is a blob of data, such as a password, SSH private key, SSL certificate, or another piece of data that should not be transmitted over a network or stored unencrypted in a Dockerfile or in your application&#39;s source code. You can use Docker secrets to centrally manage this data and securely transmit it to only those containers that need access to it.</description>
    </item>
    <item>
      <title>Using secrets with GitHub Actions</title>
      <link>https://docker.qubitpi.org/build/ci/github-actions/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/build/ci/github-actions/secrets/</guid>
      <description>A build secret is sensitive information, such as a password or API token, consumed as part of the build process. Docker Build supports two forms of secrets:&#xA;Secret mounts add secrets as files in the build container (under /run/secrets by default). SSH mounts add SSH agent sockets or keys into the build container. This page shows how to use secrets with GitHub Actions. For an introduction to secrets in general, see Build secrets.</description>
    </item>
  </channel>
</rss>
