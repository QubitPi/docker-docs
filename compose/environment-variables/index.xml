<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Docker Docs</title>
    <link>https://docker.qubitpi.org/compose/environment-variables/</link>
    <description>Recent content in Overview on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/compose/environment-variables/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Best practices for working with environment variables in Docker Compose</title>
      <link>https://docker.qubitpi.org/compose/environment-variables/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/environment-variables/best-practices/</guid>
      <description>Handle sensitive information securely Be cautious about including sensitive data in environment variables. Consider using Secrets for managing sensitive information.&#xA;Understand environment variable precedence Be aware of how Docker Compose handles the precedence of environment variables from different sources (.env files, shell variables, Dockerfiles).&#xA;Use specific environment files Consider how your application adapts to different environments. For example development, testing, production, and use different .env files as needed.&#xA;Know interpolation Understand how interpolation works within compose files for dynamic configurations.</description>
    </item>
    <item>
      <title>Environment variables precedence in Docker Compose</title>
      <link>https://docker.qubitpi.org/compose/environment-variables/envvars-precedence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/environment-variables/envvars-precedence/</guid>
      <description>When the same environment variable is set in multiple sources, Docker Compose follows a precedence rule to determine the value for that variable in your container&#39;s environment.&#xA;This page contains information on the level of precedence each method of setting environmental variables takes.&#xA;The order of precedence (highest to lowest) is as follows:&#xA;Set using docker compose run -e in the CLI. Set with either the environment or env_file attribute but with the value interpolated from your shell or an environment file.</description>
    </item>
    <item>
      <title>Set environment variables within your container&#39;s environment</title>
      <link>https://docker.qubitpi.org/compose/environment-variables/set-environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/environment-variables/set-environment-variables/</guid>
      <description>A container&#39;s environment is not set until there&#39;s an explicit entry in the service configuration to make this happen. With Compose, there are two ways you can set environment variables in your containers with your Compose file.&#xA;Tip&#xA;Don&#39;t use environment variables to pass sensitive information, such as passwords, in to your containers. Use secrets instead.&#xA;Use the environment attribute You can set environment variables directly in your container&#39;s environment with the environment attribute in your compose.</description>
    </item>
    <item>
      <title>Set or change pre-defined environment variables in Docker Compose</title>
      <link>https://docker.qubitpi.org/compose/environment-variables/envvars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/environment-variables/envvars/</guid>
      <description>Compose already comes with pre-defined environment variables. It also inherits common Docker CLI environment variables, such as DOCKER_HOST and DOCKER_CONTEXT. See Docker CLI environment variable reference for details.&#xA;This page contains information on how you can set or change the following pre-defined environment variables if you need to:&#xA;COMPOSE_CONVERT_WINDOWS_PATHS COMPOSE_FILE COMPOSE_PROFILES COMPOSE_PROJECT_NAME DOCKER_CERT_PATH COMPOSE_PARALLEL_LIMIT COMPOSE_IGNORE_ORPHANS COMPOSE_REMOVE_ORPHANS COMPOSE_PATH_SEPARATOR COMPOSE_ANSI COMPOSE_STATUS_STDOUT COMPOSE_ENV_FILES COMPOSE_MENU COMPOSE_EXPERIMENTAL Methods to override You can set or change the pre-defined environment variables:</description>
    </item>
    <item>
      <title>Set, use, and manage variables in a Compose file with interpolation</title>
      <link>https://docker.qubitpi.org/compose/environment-variables/variable-interpolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/environment-variables/variable-interpolation/</guid>
      <description>A Compose file can use variables to offer more flexibility. If you want to quickly switch between image tags to test multiple versions, or want to adjust a volume source to your local environment, you don&#39;t need to edit the Compose file each time, you can just set variables that insert values into your Compose file at run time.&#xA;Interpolation can also be used to insert values into your Compose file at run time, which is then used to pass variables into your container&#39;s environment</description>
    </item>
  </channel>
</rss>
