<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Use multiple Compose files on Docker Docs</title>
    <link>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/</link>
    <description>Recent content in Use multiple Compose files on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Merge Compose files</title>
      <link>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/merge/</guid>
      <description>&lt;p&gt;Docker Compose lets you merge and override a set of Compose files together to create a composite Compose file.&lt;/p&gt;&#xA;&lt;p&gt;By default, Compose reads two files, a &lt;code&gt;compose.yaml&lt;/code&gt; and an optional&#xA;&lt;code&gt;compose.override.yaml&lt;/code&gt; file. By convention, the &lt;code&gt;compose.yaml&lt;/code&gt;&#xA;contains your base configuration. The override file can&#xA;contain configuration overrides for existing services or entirely new&#xA;services.&lt;/p&gt;&#xA;&lt;p&gt;If a service is defined in both files, Compose merges the configurations using&#xA;the rules described below and in the&#xA;&#xA;    &#xA;    &#xA;  &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/reference/compose-file/merge/&#34;&gt;Compose Specification&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extend your Compose file</title>
      <link>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/extends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/extends/</guid>
      <description>&lt;p&gt;Docker Compose&#39;s &#xA;    &#xA;    &#xA;  &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/reference/compose-file/services/#extends&#34;&gt;&lt;code&gt;extends&lt;/code&gt; attribute&lt;/a&gt;&#xA;lets you share common configurations among different files, or even different&#xA;projects entirely.&lt;/p&gt;&#xA;&lt;p&gt;Extending services is useful if you have several services that reuse a common&#xA;set of configuration options. With &lt;code&gt;extends&lt;/code&gt; you can define a common set of&#xA;service options in one place and refer to it from anywhere. You can refer to&#xA;another Compose file and select a service you want to also use in your own&#xA;application, with the ability to override some attributes for your own needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Include</title>
      <link>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/include/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/include/</guid>
      <description>&lt;div class=&#34;text-gray-light dark:text-gray-dark flex items-center gap-2&#34;&gt;&#xA;       &lt;span class=&#34;icon-svg flex items-center&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;48&#34; height=&#34;48&#34; viewBox=&#34;0 -960 960 960&#34;&gt;&lt;path d=&#34;M530-481 353-658q-9-9-8.5-21t9.5-21q9-9 21.5-9t21.5 9l198 198q5 5 7 10t2 11q0 6-2 11t-7 10L396-261q-9 9-21 8.5t-21-9.5q-9-9-9-21.5t9-21.5l176-176Z&#34;/&gt;&lt;/svg&gt;&lt;/span&gt;&#xA;       &lt;span&gt;Introduced in Docker Compose version&#xA;         &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/compose/releases/release-notes/#2203&#34;&gt;2.20.3&lt;/a&gt;&#xA;       &lt;/span&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;  &lt;p&gt;With &lt;code&gt;include&lt;/code&gt;, you can incorporate a separate &lt;code&gt;compose.yaml&lt;/code&gt; file directly in your current &lt;code&gt;compose.yaml&lt;/code&gt; file. This makes it easy to modularize complex applications into sub-Compose files, which in turn enables application configurations to be made simpler and more explicit.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;The &#xA;    &#xA;    &#xA;  &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/reference/compose-file/include/&#34;&gt;&lt;code&gt;include&lt;/code&gt; top-level element&lt;/a&gt; helps to reflect the engineering team responsible for the code directly in the config file&#39;s organization. It also solves the relative path problem that &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/extends/&#34;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt; and &#xA;  &lt;a class=&#34;link&#34; href=&#34;https://docker.qubitpi.org/compose/how-tos/multiple-compose-files/merge/&#34;&gt;merge&lt;/a&gt; present.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
