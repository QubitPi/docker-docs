<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Docker Docs</title>
    <link>https://docs.docker.com/compose/multiple-compose-files/</link>
    <description>Recent content in Overview on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/compose/multiple-compose-files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Extend your Compose file</title>
      <link>https://docs.docker.com/compose/multiple-compose-files/extends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/multiple-compose-files/extends/</guid>
      <description>Docker Compose&#39;s extends attribute lets you share common configurations among different files, or even different projects entirely.&#xA;Extending services is useful if you have several services that reuse a common set of configuration options. With extends you can define a common set of service options in one place and refer to it from anywhere. You can refer to another Compose file and select a service you want to also use in your own application, with the ability to override some attributes for your own needs.</description>
    </item>
    <item>
      <title>Include</title>
      <link>https://docs.docker.com/compose/multiple-compose-files/include/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/multiple-compose-files/include/</guid>
      <description>Introduced in Docker Compose version 2.20.3 With include, you can incorporate a separate compose.yaml file directly in your current compose.yaml file. This makes it easy to modularize complex applications into sub-Compose files, which in turn enables application configurations to be made simpler and more explicit. The include top-level element helps to reflect the engineering team responsible for the code directly in the config file&#39;s organization. It also solves the relative path problem that extends and merge present.</description>
    </item>
    <item>
      <title>Merge Compose files</title>
      <link>https://docs.docker.com/compose/multiple-compose-files/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/multiple-compose-files/merge/</guid>
      <description>Docker Compose lets you merge and override a set of Compose files together to create a composite Compose file.&#xA;By default, Compose reads two files, a compose.yml and an optional compose.override.yml file. By convention, the compose.yml contains your base configuration. The override file can contain configuration overrides for existing services or entirely new services.&#xA;If a service is defined in both files, Compose merges the configurations using the rules described below and in the Compose Specification.</description>
    </item>
  </channel>
</rss>
