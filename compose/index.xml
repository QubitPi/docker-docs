<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Compose overview on Docker Docs</title>
    <link>https://docs.docker.com/compose/</link>
    <description>Recent content in Docker Compose overview on Docker Docs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://docs.docker.com/compose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compose FAQs</title>
      <link>https://docs.docker.com/compose/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/faq/</guid>
      <description>What is the difference between docker compose and docker-compose Version one of the Docker Compose command-line binary was first released in 2014. It was written in Python, and is invoked with docker-compose. Typically, Compose V1 projects include a top-level version element in the compose.yml file, with values ranging from 2.0 to 3.8, which refer to the specific file formats.&#xA;Version two of the Docker Compose command-line binary was announced in 2020, is written in Go, and is invoked with docker compose.</description>
    </item>
    <item>
      <title>Control startup and shutdown order in Compose</title>
      <link>https://docs.docker.com/compose/startup-order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/startup-order/</guid>
      <description>You can control the order of service startup and shutdown with the depends_on attribute. Compose always starts and stops containers in dependency order, where dependencies are determined by depends_on, links, volumes_from, and network_mode: &amp;quot;service:...&amp;quot;.&#xA;A good example of when you might use this is an application which needs to access a database. If both services are started with docker compose up, there is a chance this will fail since the application service might start before the database service and won&#39;t find a database able to handle its SQL statements.</description>
    </item>
    <item>
      <title>Docker Compose Quickstart</title>
      <link>https://docs.docker.com/compose/gettingstarted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/gettingstarted/</guid>
      <description>This tutorial aims to introduce fundamental concepts of Docker Compose by guiding you through the development of a basic Python web application.&#xA;Using the Flask framework, the application features a hit counter in Redis, providing a practical example of how Docker Compose can be applied in web development scenarios.&#xA;The concepts demonstrated here should be understandable even if you&#39;re not familiar with Python.&#xA;This is a non-normative example that just highlights the key things you can do with Compose.</description>
    </item>
    <item>
      <title>Docker Compose release notes</title>
      <link>https://docs.docker.com/compose/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/release-notes/</guid>
      <description>For more detailed information, see the release notes in the Compose repo.&#xA;2.28.1 2024-06-24 Bug fixes and enhancements Fixed progress display, broken in v2.28.0, when TTY mode available. 2.28.0 2024-06-21 Update Dependencies upgrade: bump compose-go to v2.1.3 Dependencies upgrade: bump docker engine and cli to v27.0.1-rc.1 2.27.3 2024-06-21 Update Dependencies upgrade: bump buildx to 0.15.1 Dependencies upgrade: bump buildkit to 0.14.1 2.27.2 2024-06-20 Update Dependencies upgrade: bump golang to 1.21.11 Dependencies upgrade: bump docker engine and cli to v26.</description>
    </item>
    <item>
      <title>Give feedback</title>
      <link>https://docs.docker.com/compose/feedback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/feedback/</guid>
      <description>There are many ways you can provide feedback on Docker Compose.&#xA;In-product feedback If you have obtained Docker Compose through Docker Desktop, you can use the docker feedback command to submit feedback directly from the command line.&#xA;Report bugs or problems on GitHub To report bugs or problems, visit Docker Compose on GitHub&#xA;Feedback via Community Slack channels You can also provide feedback through the #docker-compose Docker Community Slack channel.</description>
    </item>
    <item>
      <title>History and development of Docker Compose</title>
      <link>https://docs.docker.com/compose/intro/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/intro/history/</guid>
      <description>This page provides:&#xA;A brief history of the development of the Docker Compose CLI A clear explanation of the major versions and file formats that make up Compose V1 and Compose V2 The main differences between Compose V1 and Compose V2 Introduction The image above shows that the currently supported version of the Docker Compose CLI is Compose V2 which is defined by the Compose Specification.&#xA;It also provides a quick snapshot of the differences in file formats, command-line syntax, and top-level elements.</description>
    </item>
    <item>
      <title>How Compose works</title>
      <link>https://docs.docker.com/compose/compose-application-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/compose-application-model/</guid>
      <description>With Docker Compose you use a YAML configuration file, known as the Compose file, to configure your application’s services, and then you create and start all the services from your configuration with the Compose CLI.&#xA;The Compose file, or compose.yaml file, follows the rules provided by the Compose Specification in how to define multi-container applications. This is the Docker Compose implementation of the formal Compose Specification.&#xA;The Compose application model Computing components of an application are defined as services.</description>
    </item>
    <item>
      <title>How to use secrets in Docker Compose</title>
      <link>https://docs.docker.com/compose/use-secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/use-secrets/</guid>
      <description>A secret is any piece of data, such as a password, certificate, or API key, that shouldn’t be transmitted over a network or stored unencrypted in a Dockerfile or in your application’s source code.&#xA;Docker Compose provides a way for you to use secrets without having to use environment variables to store information. If you’re injecting passwords and API keys as environment variables, you risk unintentional information exposure. Services can only access secrets when explicitly granted by a secrets attribute within the services top-level element.</description>
    </item>
    <item>
      <title>Migrate to Compose V2</title>
      <link>https://docs.docker.com/compose/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/migrate/</guid>
      <description>From July 2023 Compose V1 stopped receiving updates. It’s also no longer available in new releases of Docker Desktop.&#xA;Compose V2, which was first released in 2020, is included with all currently supported versions of Docker Desktop. It offers an improved CLI experience, improved build performance with BuildKit, and continued new-feature development.&#xA;How do I switch to Compose V2? The easiest and recommended way is to make sure you have the latest version of Docker Desktop, which bundles the Docker Engine and Docker CLI platform including Compose V2.</description>
    </item>
    <item>
      <title>Networking in Compose</title>
      <link>https://docs.docker.com/compose/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/networking/</guid>
      <description>Important&#xA;Docker&#39;s documentation refers to and describes Compose V2 functionality.&#xA;Effective July 2023, Compose V1 stopped receiving updates and is no longer in new Docker Desktop releases. Compose V2 has replaced it and is now integrated into all current Docker Desktop versions. For more information, see Migrate to Compose V2.&#xA;By default Compose sets up a single network for your app. Each container for a service joins the default network and is both reachable by other containers on that network, and discoverable by the service&#39;s name.</description>
    </item>
    <item>
      <title>Sample apps with Compose</title>
      <link>https://docs.docker.com/compose/samples-for-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/samples-for-compose/</guid>
      <description>The following samples show the various aspects of how to work with Docker Compose. As a prerequisite, be sure to install Docker Compose if you have not already done so.&#xA;Key concepts these samples cover The samples should help you to:&#xA;Define services based on Docker images using Compose files: compose.yml and docker-stack.yml Understand the relationship between compose.yml and Dockerfiles Learn how to make calls to your application services from Compose files Learn how to deploy applications and services to a swarm Samples tailored to demo Compose These samples focus specifically on Docker Compose:</description>
    </item>
    <item>
      <title>Specify a project name</title>
      <link>https://docs.docker.com/compose/project-name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/project-name/</guid>
      <description>In Compose, the default project name is derived from the base name of the project directory. However, you have the flexibility to set a custom project name.&#xA;This page offers examples of scenarios where custom project names can be helpful, outlines the various methods to set a project name, and provides the order of precedence for each approach.&#xA;Note&#xA;The default project directory is the base directory of the Compose file.</description>
    </item>
    <item>
      <title>Turn on GPU access with Docker Compose</title>
      <link>https://docs.docker.com/compose/gpu-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/gpu-support/</guid>
      <description>Compose services can define GPU device reservations if the Docker host contains such devices and the Docker Daemon is set accordingly. For this, make sure you install the prerequisites if you haven&#39;t already done so.&#xA;The examples in the following sections focus specifically on providing service containers access to GPU devices with Docker Compose. You can use either docker-compose or docker compose commands. For more information, see Migrate to Compose V2.</description>
    </item>
    <item>
      <title>Use Compose in production</title>
      <link>https://docs.docker.com/compose/production/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/production/</guid>
      <description>When you define your app with Compose in development, you can use this definition to run your application in different environments such as CI, staging, and production.&#xA;The easiest way to deploy an application is to run it on a single server, similar to how you would run your development environment. If you want to scale up your application, you can run Compose apps on a Swarm cluster.&#xA;Modify your Compose file for production You may need to make changes to your app configuration to make it ready for production.</description>
    </item>
    <item>
      <title>Use Compose Watch</title>
      <link>https://docs.docker.com/compose/file-watch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/file-watch/</guid>
      <description>Introduced in Docker Compose version 2.22.0 The watch attribute automatically updates and previews your running Compose services as you edit and save your code. For many projects, this enables a hands-off development workflow once Compose is running, as services automatically update themselves when you save your work. watch adheres to the following file path rules:&#xA;All paths are relative to the project directory Directories are watched recursively Glob patterns aren&#39;t supported Rules from .</description>
    </item>
    <item>
      <title>Using profiles with Compose</title>
      <link>https://docs.docker.com/compose/profiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/profiles/</guid>
      <description>Profiles help you adjust your Compose application for different environments or use cases by selectively activating services. Services can be assigned to one or more profiles; unassigned services start by default, while assigned ones only start when their profile is active. This setup means specific services, like those for debugging or development, to be included in a single compose.yml file and activated only as needed. Assigning profiles to services Services are associated with profiles through the profiles attribute which takes an array of profile names:</description>
    </item>
    <item>
      <title>Why use Compose?</title>
      <link>https://docs.docker.com/compose/intro/features-uses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.docker.com/compose/intro/features-uses/</guid>
      <description>Key benefits of Docker Compose Using Docker Compose offers several benefits that streamline the development, deployment, and management of containerized applications:&#xA;Simplified control: Docker Compose allows you to define and manage multi-container applications in a single YAML file. This simplifies the complex task of orchestrating and coordinating various services, making it easier to manage and replicate your application environment.&#xA;Efficient collaboration: Docker Compose configuration files are easy to share, facilitating collaboration among developers, operations teams, and other stakeholders.</description>
    </item>
  </channel>
</rss>
